<MudPaper Class="my-2 pa-6 rounded-lg">
    <div class="d-flex justify-space-between mb-2">
        <MudText Typo="Typo.subtitle1"
            class="mud-text-secondary">
            @Expense.EffectiveDate.ToLongDateString()
        </MudText>
        <h4 class="red-text text-accent-4 mr-8">
            @Expense.Amount.ToString("#,###.##")
        </h4>
    </div>


    <MudText Typo="Typo.subtitle1"
        class="mud-text-secondary">
        @Expense.Description
    </MudText>

    <br>

    <div class="d-flex align-center">
        <MudText Class="mr-2">Accounts</MudText>

        @if (!Expense.IsBalanced)
        {
            <ExpenseAccountCreateButton Expense="@Expense"
            OnCreated="HandleChange" />
        }


    </div>

    @if (Expense.Accounts.Any())
    {
        <MudList>
            @foreach (var account in Expense.Accounts)
            {
                <MudListItem Class="p-0">
                    <MudText Class="d-flex align-center mud-text-secondary align-center">
                        <span>@account.AccountType.Name</span>

                        <MudSpacer />

                        <span class="mr-2">@account.Amount.ToString("#,###.##")</span>

                        <DeleteExpenseAccountButton Account="@account"
                    OnDeleted="HandleChange" />

                    </MudText>
                </MudListItem>
            }

            <MudDivider />

            <MudListItem Class="p-0">
                <MudText Class="d-flex align-center mud-text-secondary align-center"
                Typo="Typo.h6">
                    <span class="">Total</span>

                    <MudSpacer />

                    <span class="mr-8 mud-primary-text">@Expense.Accounts.Sum(x=>x.Amount).ToString("#,###.##")
                    </span>

                </MudText>
            </MudListItem>

        </MudList>
    }


</MudPaper>


@code {
    [Parameter, EditorRequired]
    public ExpenseResponse Expense { get; set; }

    [Parameter]
    public EventCallback OnChanges { get; set; }

    public async Task HandleChange()
    {
        await OnChanges.InvokeAsync();
    }
}