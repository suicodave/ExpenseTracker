@inject HttpClient _http
@inject OrganizationAppState _organizationAppState
@implements IDisposable

<div class="d-flex align-center">
    <MudText Color="Color.Primary"
        Class="my-4"
        Typo="Typo.h5">
        Account Types
    </MudText>

    <MudSpacer></MudSpacer>

    <AccountTypeCreateButton OnCreated="GetData" />
</div>

@foreach (var accountType in _accountTypes)
{
    <MudPaper Class="my-2 pa-6 rounded-lg">
        <MudText Typo="Typo.h5" Class="mb-2">
            @accountType.Name
        </MudText>

        <MudText Typo="Typo.subtitle1" class="mud-text-secondary">
            @accountType.Description
        </MudText>
    </MudPaper>
}


@code {
    private IEnumerable<AccountTypeResponse> _accountTypes { get; set; } = Enumerable.Empty<AccountTypeResponse>();

    protected override async Task OnInitializedAsync()
    {
        _organizationAppState.StateChanged += async () => await OrganizationAppState_StateChanged();

        await GetData();
    }
    private async Task GetData()
    {
        _accountTypes = await _http.GetFromJsonAsync<IEnumerable<AccountTypeResponse>>("AccountTypes");
    }

    private async Task OrganizationAppState_StateChanged()
    {
        await GetData();

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _organizationAppState.StateChanged -= async () => await OrganizationAppState_StateChanged();
    }
}