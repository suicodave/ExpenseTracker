@page "/Auth"
@using Blazored.LocalStorage
@using Shared.Auth
@inject HttpClient Http

@attribute [AllowAnonymous]

<MudPaper Class="pa-16 ma-2"
    Elevation="3">
    <EditForm Model="@request"
        OnSubmit="HandleSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudTextField @bind-Value="@request.Email"
            Label="Email"
            Variant="Variant.Outlined"
            Adornment="Adornment.Start"
            InputType="@InputType.Email" />


        <MudTextField @bind-Value="@request.Password"
            Label="Password"
            InputType="@InputType.Password"
            Variant="Variant.Outlined"></MudTextField>

        <MudButton Variant="Variant.Filled"
            ButtonType="ButtonType.Submit"
            Color="Color.Primary">Sign In</MudButton>

    </EditForm>
</MudPaper>




@code {
    SignInRequest request = new();

    [Inject]
    private ILocalStorageService _localStorageService { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    AuthenticationStateProvider _stateProvider { get; set; }

    async Task HandleSubmit()
    {
        var result = await Http.PostAsJsonAsync("Auth", request);

        string token = await result.Content.ReadAsStringAsync();

        await _localStorageService.SetItemAsStringAsync("jwt", token);

        await _stateProvider.GetAuthenticationStateAsync();


        _navigationManager.NavigateTo("/");
    }
}