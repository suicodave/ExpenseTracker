@page "/Auth"
@using Blazored.LocalStorage
@using Shared.Auth
@using Blazored.FluentValidation
@inject HttpClient Http

@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.Small"
    Class="mt-16">
    <MudPaper Elevation="2"
        Class="pa-16 ma-2">

        <MudText Typo="@Typo.h4"
            Class="mb-4">Xpense</MudText>

        <EditForm Model="@request"
            OnValidSubmit="HandleSubmit">

            <FluentValidationValidator />

            <MudTextField @bind-Value="@request.Email"
                Label="Email"
                Variant="Variant.Outlined"
                Adornment="Adornment.Start"
                InputType="@InputType.Email"
                For="@(()=>request.Email)" />


            <MudTextField @bind-Value="@request.Password"
                Label="Password"
                InputType="@InputType.Password"
                Variant="Variant.Outlined"
                For="@(()=>request.Password)" />

            <div class="d-flex justify-end">
                <MudButton Variant="Variant.Filled"
                    ButtonType="ButtonType.Submit"
                    Color="Color.Primary"
                    Class="mt-4">Sign In</MudButton>
            </div>


        </EditForm>
    </MudPaper>
</MudContainer>






@code {
    SignInRequest request = new();

    [Inject]
    private ILocalStorageService _localStorageService { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    AuthenticationStateProvider _stateProvider { get; set; }


    async Task HandleSubmit()
    {
        var result = await Http.PostAsJsonAsync("Auth", request);

        string token = await result.Content.ReadAsStringAsync();
        @*
            await _localStorageService.SetItemAsStringAsync("jwt", token);

            await _stateProvider.GetAuthenticationStateAsync();


            _navigationManager.NavigateTo("/"); *@
    }
}