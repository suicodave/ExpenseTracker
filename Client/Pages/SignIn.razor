@page "/Auth"
@using Blazored.LocalStorage
@using Shared.Auth
@using Blazored.FluentValidation
@using System.Net
@inject HttpClient _http
@inject AuthenticationStateProvider _stateProvider
@inject NavigationManager _navigationManager

@attribute [AllowAnonymous]

<PageTitle>Sign In</PageTitle>


<AuthorizeView>
    <Authorized>
        <Redirect Path="/"></Redirect>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small"
            Class="mt-16">
            <MudPaper Elevation="2"
                Class="pa-16 ma-2">

                <MudText Typo="@Typo.h4"
                    Class="mb-4">Xpense</MudText>

                <EditForm Model="@_request"
                    OnValidSubmit="HandleSubmit"
                    Context="editContext">

                    <FluentValidationValidator />

                    <MudTextField @bind-Value="@_request.Email"
                        Label="Email"
                        Variant="Variant.Outlined"
                        Adornment="Adornment.Start"
                        InputType="@InputType.Email"
                        For="@(()=>_request.Email)" />


                    <MudTextField @bind-Value="@_request.Password"
                        Label="Password"
                        InputType="@InputType.Password"
                        Variant="Variant.Outlined"
                        For="@(()=>_request.Password)" />

                    <div class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled"
                            ButtonType="ButtonType.Submit"
                            Color="Color.Primary"
                            Class="mt-4"
                            Disabled="@isLoading">Sign In</MudButton>
                    </div>


                </EditForm>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>





@code {
    private SignInRequest _request = new();

    [Inject]
    private ILocalStorageService _localStorageService { get; set; }


    private bool isLoading { get; set; }


    async Task HandleSubmit()
    {
        this.isLoading = true;

        var result = await _http.PostAsJsonAsync("Auth", _request);

        this.isLoading = false;

        if (result.StatusCode == HttpStatusCode.OK)
        {
            string token = await result.Content.ReadAsStringAsync();

            await _localStorageService.SetItemAsStringAsync("jwt", token);

            await _stateProvider.GetAuthenticationStateAsync();

            _navigationManager.NavigateTo("/");

            return;
        }


    }
}