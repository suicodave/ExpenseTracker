@inject OrganizationAppState _organizationAppState
@inject ILogger<OrganizationSwitcher> _logger
@inject HttpClient _http
@inject HttpInterceptorService _httpClientInterceptor
@inject ISnackbar _snackbar

@implements IDisposable



@if (Organizations.Any())
{

    <div style="@switcherBackgroundStyle"
    class="rounded">
        <MudSelect T="UserOrganizationResponse"
        FullWidth="false"
        Class="ma-0"
        Variant="Variant.Outlined"
        Margin="Margin.Dense"
        AdornmentIcon="@Icons.Filled.Groups"
        ValueChanged="OnOrganizationSelected"
        Value="@defaultOrganization">

            @foreach (var organization in Organizations)
            {
                <MudSelectItem T="UserOrganizationResponse"
            Value="@organization" />

            }

        </MudSelect>
    </div>

}

@code {
    private IEnumerable<UserOrganizationResponse> Organizations => _organizationAppState.Organizations ??
        Enumerable.Empty<UserOrganizationResponse>();

    private UserOrganizationResponse? defaultOrganization => Organizations.Where(x => x.IsDefault).FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {

        await _organizationAppState.LoadWhenEmpty();

        _organizationAppState.StateChanged += OrganizationAppState_StateChanged;

    }

    private string switcherBackgroundStyle = $"background:{Colors.BlueGrey.Lighten5}";


    private void OrganizationAppState_StateChanged()
    {
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _organizationAppState.StateChanged -= OrganizationAppState_StateChanged;
    }


    private async Task OnOrganizationSelected(UserOrganizationResponse organization)
    {
        _snackbar.Add("Switching organization. Please wait.", Severity.Info);

        var response = await _organizationAppState.SetAsDefault(organization.Id);

        if (!response.IsSuccessStatusCode)
        {
            _snackbar.Add("Failed switching organization.", Severity.Error);
        }

        _snackbar.Add("Saved successfully.", Severity.Success);

    }
}