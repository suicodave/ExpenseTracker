@inject OrganizationAppState _organizationAppState
@inject ILogger<OrganizationSwitcher> _logger
@inject HttpClient _http
@inject HttpInterceptorService _httpClientInterceptor
@inject ISnackbar _snackbar

@implements IDisposable



@if (Organizations.Any())
{

    <div style="@($"background:{Colors.BlueGrey.Lighten5};")" class="rounded">
        <MudSelect T="UserOrganizationResponse"
        FullWidth="false"
        Class="d-block"
        Variant="Variant.Outlined"
        Margin="Margin.Dense"
        AdornmentIcon="@Icons.Filled.Groups"
        ValueChanged="OnOrganizationSelected"
        Value="@defaultOrganization">

            @foreach (var organization in Organizations)
            {
                <MudSelectItem T="UserOrganizationResponse"
            Value="@organization" />

            }

        </MudSelect>
    </div>

}

@code {
    private IEnumerable<UserOrganizationResponse> Organizations { get; set; } =
        Enumerable.Empty<UserOrganizationResponse>();

    private UserOrganizationResponse? defaultOrganization => Organizations.Where(x => x.IsDefault).FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {

        if (_organizationAppState.Organizations is null)
        {

            await GetData();
        }
        else
        {
            Organizations = _organizationAppState.Organizations;
        }

        _organizationAppState.StateChanged += (source, organizations) => OrganizationAppState_StateChanged(source,
        organizations);

    }


    private void OrganizationAppState_StateChanged(ComponentBase source, IEnumerable<UserOrganizationResponse>
    organizations)
    {
        if (source != this)
        {
            Organizations = organizations;

            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        _organizationAppState.StateChanged -= (source, organizations) => OrganizationAppState_StateChanged(source,
        organizations);
    }

    private async Task GetData()
    {
        Organizations = await _http.GetFromJsonAsync<IEnumerable<UserOrganizationResponse>>("Organizations/Owned") ??
        Enumerable.Empty<UserOrganizationResponse>();

        _organizationAppState.UpdateOrganizations(this, Organizations);
    }

    private async Task OnOrganizationSelected(UserOrganizationResponse organization)
    {
        string path = $"Organizations/{organization.Id}/SetDefault";

        _snackbar.Add("Switching organization. Please wait.", Severity.Info);

        var response = await _http.PutAsync(path, null);

        if (!response.IsSuccessStatusCode)
        {
            _snackbar.Add("Failed switching organization.", Severity.Error);
        }

        _snackbar.Add("Saved successfully.", Severity.Success);

        var currentOrg = Organizations.Where(x => x.IsDefault).FirstOrDefault();


        if (currentOrg is not null)
        {
            currentOrg.IsDefault = false;
        }

        organization.IsDefault = true;


        _organizationAppState.UpdateOrganizations(this, Organizations);
    }
}