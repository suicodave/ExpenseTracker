@inject OrganizationAppState _organizationAppState
@inject ILogger<OrganizationSwitcher> _logger
@inject HttpClient _http
@inject HttpInterceptorService _httpClientInterceptor
@inject ISnackbar _snackbar

@implements IDisposable



@if (Organizations.Any())
{
    <MudSelect T="OrganizationResponse"
    FullWidth="false"
    Variant="Variant.Outlined"
    Margin="Margin.Dense"
    AdornmentIcon="@Icons.Filled.Groups"
    ValueChanged="OnOrganizationSelected"
    Value="@defaultOrganization">

        @foreach (var organization in Organizations)
        {
            <MudSelectItem T="OrganizationResponse"
        Value="@organization" />

        }

    </MudSelect>
}

@code {
    private IEnumerable<OrganizationResponse> Organizations { get; set; } = Enumerable.Empty<OrganizationResponse>();

    private OrganizationResponse? defaultOrganization => Organizations.Where(x => x.IsDefault).FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {

        if (_organizationAppState.Organizations is null)
        {

            await GetData();
        }
        else
        {
            Organizations = _organizationAppState.Organizations;
        }

        _organizationAppState.StateChanged += (source, organizations) => OrganizationAppState_StateChanged(source,
        organizations);

    }


    private void OrganizationAppState_StateChanged(ComponentBase source, IEnumerable<OrganizationResponse> organizations)
    {
        if (source != this)
        {
            Organizations = organizations;

            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        _organizationAppState.StateChanged -= (source, organizations) => OrganizationAppState_StateChanged(source,
        organizations);
    }

    private async Task GetData()
    {
        Organizations = await _http.GetFromJsonAsync<IEnumerable<OrganizationResponse>>("Organizations/Owned") ??
        Enumerable.Empty<OrganizationResponse>();

        _organizationAppState.UpdateOrganizations(this, Organizations);
    }

    private async Task OnOrganizationSelected(OrganizationResponse organization)
    {
        string path = $"Organizations/{organization.Id}/SetDefault";

        _snackbar.Add("Switching organization. Please wait.", Severity.Info);

        var response = await _http.PutAsync(path, null);

        if (!response.IsSuccessStatusCode)
        {
            _snackbar.Add("Failed switching organization.", Severity.Error);
        }

        _snackbar.Add("Saved successfully.", Severity.Success);

        var currentOrg = Organizations.Where(x => x.IsDefault).FirstOrDefault();


        if (currentOrg is not null)
        {
            currentOrg.IsDefault = false;
        }

        organization.IsDefault = true;


        _organizationAppState.UpdateOrganizations(this, Organizations);
    }
}