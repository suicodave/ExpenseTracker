@using Shared.Organizations
@inject HttpClient _http
@inject HttpInterceptorService _interceptor
@inject ILogger<OwnedOrganizationsList> _logger
@inject OrganizationAppState _organizationAppState
@implements IDisposable

<div class="d-flex align-center">
    <MudText Color="Color.Primary"
        Class="my-4"
        Typo="Typo.h5">
        My Organizations
    </MudText>

    <MudSpacer></MudSpacer>

    <CreateOrganizationButton OnCreated="GetData"></CreateOrganizationButton>
</div>



@foreach (var organization in _organizations)
{
    <MudPaper Class="my-2 px-6 d-flex align-center rounded-lg"
    Height="72px">
        <MudText>
            @organization.Name
        </MudText>


        @if (@organization.IsDefault)
        {
            <MudIcon Icon="@Icons.Filled.CheckCircle"
        Color="Color.Success"
        Class="ml-4" />
        }

        <MudSpacer />

        @if (!@organization.IsDefault)
        {

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <SetDefaultOrganizationButton Id="@organization.Id"
            SavedAsDefault="OnSavedAsDefault" />
            </MudMenu>

        }
    </MudPaper>
}


@code {

    private IEnumerable<OrganizationResponse> _organizations { get; set; } = Enumerable.Empty<OrganizationResponse>();

    protected override async Task OnInitializedAsync()
    {
        _interceptor.RegisterEvent();

        _organizationAppState.StateChanged += (source, organizations) => OrganizationAppState_StateChanged(source, organizations);

        await GetData();
    }

    private async Task GetData()
    {
        _organizations = await _http.GetFromJsonAsync<IEnumerable<OrganizationResponse>>("Organizations/Owned") ??
        Enumerable.Empty<OrganizationResponse>();

        _organizationAppState.UpdateOrganizations(this, _organizations);
    }

    private void OnSavedAsDefault(int id)
    {
        OrganizationResponse currentDefaultOrg = _organizations.Where(x => x.IsDefault).First();

        currentDefaultOrg.IsDefault = false;

        OrganizationResponse selectedOrg = _organizations.Where(x => x.Id == id).First();

        selectedOrg.IsDefault = true;

        _organizationAppState.UpdateOrganizations(this,_organizations);
    }

    private void OrganizationAppState_StateChanged(ComponentBase source, IEnumerable<OrganizationResponse> organizations)
    {
        if (source != this)
        {
            _organizations = organizations;
        }
    }

    void IDisposable.Dispose(){
        _organizationAppState.StateChanged -= (source, organizations) => OrganizationAppState_StateChanged(source, organizations);
    }
}