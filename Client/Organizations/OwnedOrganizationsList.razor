@inject HttpClient _http
@inject HttpInterceptorService _interceptor
@inject ILogger<OwnedOrganizationsList> _logger
@inject OrganizationAppState _organizationAppState
@implements IDisposable

<div class="d-flex align-center">
    <MudText Color="Color.Primary"
        Class="my-4"
        Typo="Typo.h5">
        My Organizations
    </MudText>

    <MudSpacer></MudSpacer>

    <CreateOrganizationButton OnCreated="_organizationAppState.GetData"></CreateOrganizationButton>
</div>



@foreach (var organization in _organizations)
{
    <MudPaper Class="my-2 px-6 d-flex align-center rounded-lg"
    Height="72px">
        <MudText>
            @organization.Organization.Name
        </MudText>


        @if (@organization.IsDefault)
        {
            <MudIcon Icon="@Icons.Filled.CheckCircle"
        Color="Color.Success"
        Class="ml-4" />
        }

        <MudSpacer />

        @if (!@organization.IsDefault)
        {

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <SetDefaultOrganizationButton Id="@organization.Id" />
            </MudMenu>

        }
    </MudPaper>
}


@code {

    private IEnumerable<UserOrganizationResponse> _organizations => _organizationAppState.Organizations ??
        Enumerable.Empty<UserOrganizationResponse>();

    protected override async Task OnInitializedAsync()
    {
        _interceptor.RegisterEvent();

        await _organizationAppState.LoadWhenEmpty();

        _organizationAppState.StateChanged += OrganizationAppState_StateChanged;
    }

    private void OrganizationAppState_StateChanged()
    {
        StateHasChanged();
    }


    void IDisposable.Dispose()
    {
        _organizationAppState.StateChanged -= OrganizationAppState_StateChanged;
    }



}